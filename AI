import speech_recognition as sr
import librosa
import numpy as np
import nltk
import random

# Download NLTK data if not already downloaded
nltk.download('vader_lexicon')
from nltk.sentiment import SentimentIntensityAnalyzer
sia = SentimentIntensityAnalyzer()

# CBT response map
CBT_RESPONSES = {
    'positive': [  
        "Keep up the good energy! Consider journaling to maintain your mood.",
        "You're doing great. Try sharing your joy with someone today."
    ],
    'neutral': [
        "Take a deep breath. Reflecting on your thoughts can bring clarity.",
        "It's okay to feel neutral. Try identifying one small thing you're grateful for."
    ],
    'negative': [
        "It's okay to feel down. Consider doing a grounding exercise like 5-4-3-2-1.",
        "Remember, this feeling will pass. Try writing down what's bothering you and challenge those thoughts."
    ]
}

# 1. Function to classify emotion from text using NLTK
def classify_text_emotion(text):
    sentiment = sia.polarity_scores(text)
    compound = sentiment['compound']
    if compound >= 0.3:
        return 'positive'
    elif compound <= -0.3:
        return 'negative'
    else:
        return 'neutral'

# 2. Analyze audio features (basic pitch + energy)
def analyze_audio_emotion(file_path):
    y, sr = librosa.load(file_path, duration=5)
    pitch = librosa.yin(y, fmin=50, fmax=300, sr=sr)
    energy = np.mean(librosa.feature.rms(y=y))
    if np.std(pitch) > 30 and energy < 0.02:
        return 'negative'
    return 'neutral'

# 3. Main Function
def detect_emotion_and_respond(audio_path):
    recognizer = sr.Recognizer()
    text = ""

    # Convert speech to text
    with sr.AudioFile(audio_path) as source:
        audio = recognizer.record(source)
        try:
            text = recognizer.recognize_google(audio)
        except sr.UnknownValueError:
            text = "[Unrecognizable Speech]"

    # NLP emotion
    text_emotion = classify_text_emotion(text)

    # Audio emotion
    audio_emotion = analyze_audio_emotion(audio_path)

    # Combine logic - if either is negative, return negative
    final_emotion = 'negative' if 'negative' in [text_emotion, audio_emotion] else text_emotion
    response = random.choice(CBT_RESPONSES[final_emotion])

    # Result dictionary
    return {
        "transcribed_text": text,
        "text_emotion": text_emotion,
        "audio_emotion": audio_emotion,
        "final_emotion": final_emotion,
        "cbt_response": response
    }

# Example usage
if __name__ == "__main__":
    audio_file = "sample.wav"  # replace with your audio file path
    result = detect_emotion_and_respond(audio_file)
    for key, value in result.items():
        print(f"{key.capitalize().replace('_', ' ')}: {value}")